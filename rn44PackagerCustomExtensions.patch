diff --git a/local-cli/cli.js b/local-cli/cli.js
index 14cf1a8d8..8f05a6233 100644
--- a/local-cli/cli.js
+++ b/local-cli/cli.js
@@ -24,3 +24,5 @@ if (require.main === module) {
 }

 module.exports = cliEntry;
+
+// repackager applied successfully
diff --git a/local-cli/bundle/buildBundle.js b/local-cli/bundle/buildBundle.js
index a1ac7c7d1..ec50cf620 100644
--- a/local-cli/bundle/buildBundle.js
+++ b/local-cli/bundle/buildBundle.js
@@ -52,6 +52,7 @@ function buildBundle(
     dev: args.dev,
     minify: !args.dev,
     platform: args.platform,
+    customExtensions: args.customExtensions || []
   };
 
   // If a packager instance was not provided, then just create one for this
@@ -84,6 +85,7 @@ function buildBundle(
       reporter: new TerminalReporter(),
       transformModulePath: transformModulePath,
       watch: false,
+      customExtensions: args.customExtensions || []
     };
 
     packagerInstance = new Server(options);
diff --git a/local-cli/bundle/bundleCommandLineArgs.js b/local-cli/bundle/bundleCommandLineArgs.js
index 40f6c42ad..640d23f9c 100644
--- a/local-cli/bundle/bundleCommandLineArgs.js
+++ b/local-cli/bundle/bundleCommandLineArgs.js
@@ -52,5 +52,10 @@ module.exports = [
     command: '--read-global-cache',
     description: 'Try to fetch transformed JS code from the global cache, if configured.',
     default: false,
-  },
+  }, {
+    command: '--customExtensions [list]',
+    description: 'Specify custom file extensions to be used on top of default platform extension',
+    parse: (val) => val.split(','),
+    default: [],
+  }
 ];
diff --git a/local-cli/server/runServer.js b/local-cli/server/runServer.js
index a9cccbf35..b293e5fcd 100644
--- a/local-cli/server/runServer.js
+++ b/local-cli/server/runServer.js
@@ -117,6 +117,7 @@ function getPackagerServer(args, config) {
     transformModulePath: transformModulePath,
     verbose: args.verbose,
     watch: !args.nonPersistent,
+    customExtensions: args.customExtensions
   });
 }
 
diff --git a/local-cli/server/server.js b/local-cli/server/server.js
index 4825fc9a0..fa219bd3d 100644
--- a/local-cli/server/server.js
+++ b/local-cli/server/server.js
@@ -103,5 +103,10 @@ module.exports = {
   }, {
     command: '--verbose',
     description: 'Enables logging',
+  }, {
+    command: '--customExtensions [list]',
+    description: 'Specify custom file extensions to be used in addition to default platform extensions',
+    parse: (val) => val.split(','),
+    default: [],
   }],
 };
diff --git a/packager/react-packager.js b/packager/react-packager.js
index e51592303..90070cf3d 100644
--- a/packager/react-packager.js
+++ b/packager/react-packager.js
@@ -51,6 +51,7 @@ type PublicBundleOptions = {
   +platform?: string,
   +runModule?: boolean,
   +sourceMapUrl?: string,
+  +customExtensions?: Array<string>
 };
 
 /**
diff --git a/packager/src/Bundler/index.js b/packager/src/Bundler/index.js
index 878e39ee2..8a0d52e64 100644
--- a/packager/src/Bundler/index.js
+++ b/packager/src/Bundler/index.js
@@ -103,6 +103,7 @@ type Options = {
   transformModulePath?: string,
   transformTimeoutInterval: ?number,
   watch: boolean,
+  customExtensions: Array<string>
 };
 
 class Bundler {
@@ -199,6 +200,7 @@ class Bundler {
           transformCodeOptions,
         ),
       watch: opts.watch,
+      customExtensions: opts.customExtensions
     });
 
     this._projectRoots = opts.projectRoots;
diff --git a/packager/src/Resolver/index.js b/packager/src/Resolver/index.js
index 55e899a13..777bc1ba8 100644
--- a/packager/src/Resolver/index.js
+++ b/packager/src/Resolver/index.js
@@ -47,6 +47,7 @@ type Options = {
   resetCache: boolean,
   transformCode: TransformCode,
   watch: boolean,
+  customExtensions: Array<string>
 };
 
 class Resolver {
@@ -79,6 +80,7 @@ class Resolver {
       preferNativePlatform: true,
       roots: opts.projectRoots,
       useWatchman: true,
+      customExtensions: opts.customExtensions
     });
     const depGraph = await DependencyGraph.load(depGraphOpts);
     return new Resolver(opts, depGraph);
diff --git a/packager/src/Server/index.js b/packager/src/Server/index.js
index 2e9304710..70b170e40 100644
--- a/packager/src/Server/index.js
+++ b/packager/src/Server/index.js
@@ -76,6 +76,7 @@ type Options = {
   transformModulePath?: string,
   transformTimeoutInterval?: number,
   watch?: boolean,
+  customExtensions?: Array<string>
 };
 
 export type BundleOptions = {
@@ -95,6 +96,7 @@ export type BundleOptions = {
   +runModule: boolean,
   sourceMapUrl: ?string,
   unbundle: boolean,
+  customExtensions?: Array<string>
 };
 
 const dependencyOpts = declareOpts({
@@ -122,6 +124,10 @@ const dependencyOpts = declareOpts({
     type: 'boolean',
     default: undefined,
   },
+  customExtensions: {
+    type: 'array',
+    required: false,
+  }
 });
 
 const bundleDeps = new WeakMap();
@@ -147,6 +153,7 @@ class Server {
     transformModulePath: void | string,
     transformTimeoutInterval: ?number,
     watch: boolean,
+    customExtensions?: Array<string>
   };
   _projectRoots: Array<string>;
   _bundles: {};
@@ -182,6 +189,7 @@ class Server {
       transformModulePath: options.transformModulePath,
       transformTimeoutInterval: options.transformTimeoutInterval,
       watch: options.watch || false,
+      customExtensions: options.customExtensions || []
     };
     const processFileChange =
       ({type, filePath, stat}) => this.onFileChange(type, filePath, stat);
@@ -203,6 +211,7 @@ class Server {
     bundlerOpts.globalTransformCache = options.globalTransformCache;
     bundlerOpts.watch = this._opts.watch;
     bundlerOpts.reporter = options.reporter;
+    bundlerOpts.customExtensions = options.customExtensions;
     this._bundler = new Bundler(bundlerOpts);
 
     // changes to the haste map can affect resolution of files in the bundle
diff --git a/packager/src/node-haste/DependencyGraph/HasteMap.js b/packager/src/node-haste/DependencyGraph/HasteMap.js
index 0c42f2896..0973c1e35 100644
--- a/packager/src/node-haste/DependencyGraph/HasteMap.js
+++ b/packager/src/node-haste/DependencyGraph/HasteMap.js
@@ -26,6 +26,7 @@ class HasteMap extends EventEmitter {
     preferNativePlatform,
     helpers,
     platforms,
+    customExtensions
   }) {
     super();
     this._extensions = extensions;
@@ -34,6 +35,7 @@ class HasteMap extends EventEmitter {
     this._moduleCache = moduleCache;
     this._platforms = platforms;
     this._preferNativePlatform = preferNativePlatform;
+    this._customExtensions = customExtensions;
 
     this._processHastePackage = throat(1, this._processHastePackage.bind(this));
     this._processHasteModule = throat(1, this._processHasteModule.bind(this));
@@ -97,9 +99,25 @@ class HasteMap extends EventEmitter {
       return null;
     }
 
+    let module;
+    for (const custom in this._customExtensions) {
+      const extensionCustom =  this._customExtensions[custom];
+      module = modulesMap[extensionCustom];
+      if (module) {
+         return module;
+      } else {
+        const extensionCustomWithPlatform = platform + '.' + this._customExtensions[custom];
+        module = modulesMap[extensionCustomWithPlatform];
+
+        if (module) {
+          return module;
+        }
+      }
+    }
+
     // If platform is 'ios', we prefer .ios.js to .native.js which we prefer to
     // a plain .js file.
-    let module;
+
     if (module == null && platform != null) {
       module = modulesMap[platform];
     }
@@ -152,7 +170,7 @@ class HasteMap extends EventEmitter {
     }
 
     const moduleMap = this._map[name];
-    const modulePlatform = getPlatformExtension(mod.path, this._platforms) || GENERIC_PLATFORM;
+    const modulePlatform = getPlatformExtension(mod.path, this._platforms, this._customExtensions) || GENERIC_PLATFORM;
     const existingModule = moduleMap[modulePlatform];
 
     if (existingModule && existingModule.path !== mod.path) {
diff --git a/packager/src/node-haste/DependencyGraph/ResolutionRequest.js b/packager/src/node-haste/DependencyGraph/ResolutionRequest.js
index 8cf2d2e51..6367fdf38 100644
--- a/packager/src/node-haste/DependencyGraph/ResolutionRequest.js
+++ b/packager/src/node-haste/DependencyGraph/ResolutionRequest.js
@@ -49,6 +49,7 @@ type Options = {
   platform: string,
   platforms: Set<string>,
   preferNativePlatform: boolean,
+  customExtensions: Array<string>
 };
 
 /**
@@ -79,6 +80,7 @@ class ResolutionRequest {
   _platform: string;
   _platforms: Set<string>;
   _preferNativePlatform: boolean;
+  _customExtensions: Array<string>;
   static emptyModule: string;
 
   constructor({
@@ -92,6 +94,7 @@ class ResolutionRequest {
     platform,
     platforms,
     preferNativePlatform,
+    customExtensions
   }: Options) {
     this._dirExists = dirExists;
     this._entryPath = entryPath;
@@ -104,6 +107,7 @@ class ResolutionRequest {
     this._platforms = platforms;
     this._preferNativePlatform = preferNativePlatform;
     this._resetResolutionCache();
+    this._customExtensions = customExtensions;
   }
 
   _tryResolve<T>(action: () => Promise<T>, secondaryAction: () => ?Promise<T>): Promise<T> {
@@ -457,24 +461,39 @@ class ResolutionRequest {
     }
 
     let file;
-    if (this._hasteFS.exists(potentialModulePath)) {
-      file = potentialModulePath;
-    } else if (this._platform != null &&
-               this._hasteFS.exists(potentialModulePath + '.' + this._platform + '.js')) {
-      file = potentialModulePath + '.' + this._platform + '.js';
-    } else if (this._preferNativePlatform &&
-               this._hasteFS.exists(potentialModulePath + '.native.js')) {
-      file = potentialModulePath + '.native.js';
-    } else if (this._hasteFS.exists(potentialModulePath + '.js')) {
-      file = potentialModulePath + '.js';
-    } else if (this._hasteFS.exists(potentialModulePath + '.json')) {
-      file = potentialModulePath + '.json';
-    } else {
-      throw new UnableToResolveError(
-        fromModule,
-        toModule,
-        `File ${potentialModulePath} doesn't exist`,
-      );
+      // example: if customExtension is 'foo, bar' and platform is 'ios' the prefered extension order is:
+      // foo, foo.ios, bar, bar.ios, ios, native
+    if (this._customExtensions && this._customExtensions.length) {
+      for (let extension in this._customExtensions) {
+           let potentialCustom = potentialModulePath + '.' + this._customExtensions[extension] + '.js';
+           let potentialCustomWithPlatform = potentialModulePath + '.'  + this._platform + '.' + this._customExtensions[extension] + '.js';
+        if (this._hasteFS.exists(potentialCustom)) {
+          file = potentialCustom;
+        } else if (this._hasteFS.exists(potentialCustomWithPlatform)) {
+          file = potentialCustomWithPlatform;
+        }
+      }
+    }
+
+    if (!file){
+      if (this._hasteFS.exists(potentialModulePath)) {
+        file = potentialModulePath;} else if (this._platform != null &&
+                  this._hasteFS.exists(potentialModulePath + '.' + this._platform + '.js')) {
+        file = potentialModulePath + '.' + this._platform + '.js';
+      } else if (this._preferNativePlatform &&
+                  this._hasteFS.exists(potentialModulePath + '.native.js')) {
+        file = potentialModulePath + '.native.js';
+      } else if (this._hasteFS.exists(potentialModulePath + '.js')) {
+        file = potentialModulePath + '.js';
+      } else if (this._hasteFS.exists(potentialModulePath + '.json')) {
+        file = potentialModulePath + '.json';
+      } else {
+        throw new UnableToResolveError(
+          fromModule,
+          toModule,
+          `File ${potentialModulePath} doesnt exist`,
+        );
+      }
     }
 
     return this._moduleCache.getModule(file);
diff --git a/packager/src/node-haste/index.js b/packager/src/node-haste/index.js
index 328abfe3d..9046a8a79 100644
--- a/packager/src/node-haste/index.js
+++ b/packager/src/node-haste/index.js
@@ -69,6 +69,7 @@ type Options = {
   transformCode: TransformCode,
   useWatchman: boolean,
   watch: boolean,
+  customExtensions: Array<string>
 };
 
 const JEST_HASTE_MAP_CACHE_BREAKER = 1;
@@ -114,6 +115,7 @@ class DependencyGraph extends EventEmitter {
       roots: opts.roots,
       useWatchman: opts.useWatchman,
       watch: opts.watch,
+      customExtensions: opts.customExtensions
     });
   }
 
@@ -231,6 +233,7 @@ class DependencyGraph extends EventEmitter {
       platform,
       platforms: this._opts.platforms,
       preferNativePlatform: this._opts.preferNativePlatform,
+      customExtensions: this._opts.customExtensions
     });
 
     const response = new ResolutionResponse({transformOptions});
@@ -249,7 +252,7 @@ class DependencyGraph extends EventEmitter {
 
   _getRequestPlatform(entryPath: string, platform: string) {
     if (platform == null) {
-      platform = getPlatformExtension(entryPath, this._opts.platforms);
+      platform = getPlatformExtension(entryPath, this._opts.platforms, this._opts.customExtensions);
     } else if (!this._opts.platforms.has(platform)) {
       throw new Error('Unrecognized platform: ' + platform);
     }
diff --git a/packager/src/node-haste/lib/getPlatformExtension.js b/packager/src/node-haste/lib/getPlatformExtension.js
index 6f5058333..3c347106a 100644
--- a/packager/src/node-haste/lib/getPlatformExtension.js
+++ b/packager/src/node-haste/lib/getPlatformExtension.js
@@ -15,14 +15,26 @@ const SUPPORTED_PLATFORM_EXTS = new Set([
 ]);
 
 // Extract platform extension: index.ios.js -> ios
-function getPlatformExtension(file, platforms = SUPPORTED_PLATFORM_EXTS) {
+function getPlatformExtension(file, platforms = SUPPORTED_PLATFORM_EXTS, customExtensions = []) {
+  const extensionSet = new Set(customExtensions);
   const last = file.lastIndexOf('.');
   const secondToLast = file.lastIndexOf('.', last - 1);
   if (secondToLast === -1) {
     return null;
   }
-  const platform = file.substring(secondToLast + 1, last);
-  return platforms.has(platform) ? platform : null;
+
+  const thirdToSecond = file.lastIndexOf('.', secondToLast - 1);
+  if (thirdToSecond  !== -1) {
+    const platform = file.substring(thirdToSecond + 1, secondToLast);
+    const custom = file.substring(secondToLast + 1, last);
+    if (extensionSet.has(custom)) {
+      const fullCustomExtension = file.substring(thirdToSecond + 1, last);
+      return fullCustomExtension;
+    }
+  }
+
+  const extension = file.substring(secondToLast + 1, last);
+  return extensionSet.has(extension)|| platforms.has(extension) ? extension : null;
 }
 
 module.exports = getPlatformExtension;
