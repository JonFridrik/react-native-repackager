From 32e2196e913f0ff3c4b604e28e9c403096d35d73 Mon Sep 17 00:00:00 2001
From: Gilad Artzi <gilada@wix.com>
Date: Tue, 4 Apr 2017 14:44:49 +0300
Subject: [PATCH] Adding support for custom extensions

---
 .../react-native/local-cli/server/runServer.js     |  1 +
 .../react-native/local-cli/server/server.js        | 16 +++++++
 .../packager/react-packager/src/Bundler/index.js   |  5 ++
 .../packager/react-packager/src/Resolver/index.js  |  5 ++
 .../packager/react-packager/src/Server/index.js    |  4 ++
 .../src/node-haste/DependencyGraph/HasteMap.js     | 22 ++++++++-
 .../DependencyGraph/ResolutionRequest.js           | 55 +++++++++++++++-------
 .../react-packager/src/node-haste/index.js         |  6 ++-
 .../src/node-haste/lib/getPlatformExtension.js     | 20 ++++++--
 9 files changed, 110 insertions(+), 24 deletions(-)

diff --git a/node_modules/react-native/local-cli/server/runServer.js b/node_modules/react-native/local-cli/server/runServer.js
index 2490aec..5236cf1 100644
--- a/node_modules/react-native/local-cli/server/runServer.js
+++ b/node_modules/react-native/local-cli/server/runServer.js
@@ -92,6 +92,7 @@ function getPackagerServer(args, config) {
     assetExts: defaultAssetExts.concat(args.assetExts),
     resetCache: args.resetCache,
     verbose: args.verbose,
+    customExtensions: args.customExtensions
   });
 }
 
diff --git a/node_modules/react-native/local-cli/server/server.js b/node_modules/react-native/local-cli/server/server.js
index fe0ee73..9ec1e7a 100644
--- a/node_modules/react-native/local-cli/server/server.js
+++ b/node_modules/react-native/local-cli/server/server.js
@@ -36,6 +36,17 @@ function server(argv, config, args) {
     })
   );
 
+  if (args.customExtensions && args.customExtensions.length){
+    console.log('\x1b[33m\x1b[1m', formatBanner(
+      'Running in CustomExtension mode' +'\n' +
+      'All files with: ' + args.customExtensions + ' extensions will be prefered.', {
+        marginLeft: 5,
+        marginRight: 5,
+        paddingBottom: 1,
+      })
+    , '\x1b[0m');
+  }
+
   console.log(
     'Looking for JS files in\n  ',
     chalk.dim(args.projectRoots.join('\n   ')),
@@ -116,5 +127,10 @@ module.exports = {
   }, {
     command: '--verbose',
     description: 'Enables logging',
+  }, {
+    command: '--customExtensions [list]',
+    description: 'Specify a custom file extension to be used instead of default platform extension',
+    parse: (val) => val.split(','),
+    default: [],
   }],
 };
diff --git a/node_modules/react-native/packager/react-packager/src/Bundler/index.js b/node_modules/react-native/packager/react-packager/src/Bundler/index.js
index d1c2dbc..6842a75 100644
--- a/node_modules/react-native/packager/react-packager/src/Bundler/index.js
+++ b/node_modules/react-native/packager/react-packager/src/Bundler/index.js
@@ -89,6 +89,10 @@ const validateOpts = declareOpts({
     type: 'boolean',
     default: false,
   },
+  customExtensions: {
+    type: 'array',
+    required: false,
+  }
 });
 
 const assetPropertyBlacklist = new Set([
@@ -150,6 +154,7 @@ class Bundler {
       polyfillModuleNames: opts.polyfillModuleNames,
       projectRoots: opts.projectRoots,
       resetCache: opts.resetCache,
+      customExtensions: opts.customExtensions,
       transformCode:
         (module, code, options) =>
           this._transformer.transformFile(module.path, code, options),
diff --git a/node_modules/react-native/packager/react-packager/src/Resolver/index.js b/node_modules/react-native/packager/react-packager/src/Resolver/index.js
index 6f4fb98..be3e25a 100644
--- a/node_modules/react-native/packager/react-packager/src/Resolver/index.js
+++ b/node_modules/react-native/packager/react-packager/src/Resolver/index.js
@@ -62,6 +62,10 @@ const validateOpts = declareOpts({
     type: 'boolean',
     default: false,
   },
+  customExtensions: {
+    type: 'array',
+    required: false,
+  }
 });
 
 const getDependenciesValidateOpts = declareOpts({
@@ -108,6 +112,7 @@ class Resolver {
       assetDependencies: ['react-native/Libraries/Image/AssetRegistry'],
       // for jest-haste-map
       resetCache: options.resetCache,
+      customExtensions: opts.customExtensions,
     });
 
     this._minifyCode = opts.minifyCode;
diff --git a/node_modules/react-native/packager/react-packager/src/Server/index.js b/node_modules/react-native/packager/react-packager/src/Server/index.js
index d5da01d..2a1b76a 100644
--- a/node_modules/react-native/packager/react-packager/src/Server/index.js
+++ b/node_modules/react-native/packager/react-packager/src/Server/index.js
@@ -95,6 +95,10 @@ const validateOpts = declareOpts({
     type: 'boolean',
     default: false,
   },
+  customExtensions: {
+    type: 'array',
+    required: false,
+  }
 });
 
 const bundleOpts = declareOpts({
diff --git a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js
index a5d6a07..2d26682 100644
--- a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js
+++ b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js
@@ -26,6 +26,7 @@ class HasteMap extends EventEmitter {
     preferNativePlatform,
     helpers,
     platforms,
+    customExtensions,
   }) {
     super();
     this._extensions = extensions;
@@ -34,6 +35,7 @@ class HasteMap extends EventEmitter {
     this._preferNativePlatform = preferNativePlatform;
     this._helpers = helpers;
     this._platforms = platforms;
+    this._customExtensions = customExtensions;
 
     this._processHastePackage = throat(1, this._processHastePackage.bind(this));
     this._processHasteModule = throat(1, this._processHasteModule.bind(this));
@@ -96,9 +98,25 @@ class HasteMap extends EventEmitter {
       return null;
     }
 
+    let module;
+    for (const custom in this._customExtensions) {
+      const extensionCustom =  this._customExtensions[custom];
+      module = modulesMap[extensionCustom];
+      if (module) {
+        return module;
+      }
+      else {
+        const extensionCustomWithPlatform = platform + '.' + this._customExtensions[custom];
+        module = modulesMap[extensionCustomWithPlatform];
+
+        if (module) {
+          return module;
+        }
+      }
+    }
+
     // If platform is 'ios', we prefer .ios.js to .native.js which we prefer to
     // a plain .js file.
-    let module;
     if (module == null && platform != null) {
       module = modulesMap[platform];
     }
@@ -152,7 +170,7 @@ class HasteMap extends EventEmitter {
     }
 
     const moduleMap = this._map[name];
-    const modulePlatform = getPlatformExtension(mod.path, this._platforms) || GENERIC_PLATFORM;
+    const modulePlatform = getPlatformExtension(mod.path, this._platforms, this._customExtensions) || GENERIC_PLATFORM;
     const existingModule = moduleMap[modulePlatform];
 
     if (existingModule && existingModule.path !== mod.path) {
diff --git a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js
index dff5b74..98dcdf0 100644
--- a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js
+++ b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js
@@ -32,6 +32,7 @@ class ResolutionRequest {
     fastfs,
     shouldThrowOnUnresolvedErrors,
     extraNodeModules,
+    customExtensions
   }) {
     this._platform = platform;
     this._platforms = platforms;
@@ -45,6 +46,7 @@ class ResolutionRequest {
     this._shouldThrowOnUnresolvedErrors = shouldThrowOnUnresolvedErrors;
     this._extraNodeModules = extraNodeModules;
     this._resetResolutionCache();
+    this._customExtensions = customExtensions;
   }
 
   _tryResolve(action, secondaryAction) {
@@ -439,24 +441,41 @@ class ResolutionRequest {
       }
 
       let file;
-      if (this._fastfs.fileExists(potentialModulePath)) {
-        file = potentialModulePath;
-      } else if (this._platform != null &&
-                 this._fastfs.fileExists(potentialModulePath + '.' + this._platform + '.js')) {
-        file = potentialModulePath + '.' + this._platform + '.js';
-      } else if (this._preferNativePlatform &&
-                 this._fastfs.fileExists(potentialModulePath + '.native.js')) {
-        file = potentialModulePath + '.native.js';
-      } else if (this._fastfs.fileExists(potentialModulePath + '.js')) {
-        file = potentialModulePath + '.js';
-      } else if (this._fastfs.fileExists(potentialModulePath + '.json')) {
-        file = potentialModulePath + '.json';
-      } else {
-        throw new UnableToResolveError(
-          fromModule,
-          toModule,
-          `File ${potentialModulePath} doesnt exist`,
-        );
+
+
+      // example: if customExtension is 'foo, bar' and platform is 'ios' the prefered extension order is:
+      // foo, foo.ios, bar, bar.ios, ios, native
+      if (this._customExtensions && this._customExtensions.length){
+        for (let extension in this._customExtensions){
+          let potentialCustom = potentialModulePath + '.' + this._customExtensions[extension] + '.js';
+          let potentialCustomWithPlatform = potentialModulePath + '.'  + this._platform + '.' + this._customExtensions[extension] + '.js';
+            if (this._fastfs.fileExists(potentialCustom)) {
+            file = potentialCustom;
+          } else if (this._fastfs.fileExists(potentialCustomWithPlatform)) {
+            file = potentialCustomWithPlatform;
+          }
+        }
+      }
+
+      if (!file){
+        if (this._fastfs.fileExists(potentialModulePath)) {
+          file = potentialModulePath;} else if (this._platform != null &&
+                   this._fastfs.fileExists(potentialModulePath + '.' + this._platform + '.js')) {
+          file = potentialModulePath + '.' + this._platform + '.js';
+        } else if (this._preferNativePlatform &&
+                   this._fastfs.fileExists(potentialModulePath + '.native.js')) {
+          file = potentialModulePath + '.native.js';
+        } else if (this._fastfs.fileExists(potentialModulePath + '.js')) {
+          file = potentialModulePath + '.js';
+        } else if (this._fastfs.fileExists(potentialModulePath + '.json')) {
+          file = potentialModulePath + '.json';
+        } else {
+          throw new UnableToResolveError(
+            fromModule,
+            toModule,
+            `File ${potentialModulePath} doesnt exist`,
+          );
+        }
       }
 
       return this._moduleCache.getModule(file);
diff --git a/node_modules/react-native/packager/react-packager/src/node-haste/index.js b/node_modules/react-native/packager/react-packager/src/node-haste/index.js
index 5358511..e4e6091 100644
--- a/node_modules/react-native/packager/react-packager/src/node-haste/index.js
+++ b/node_modules/react-native/packager/react-packager/src/node-haste/index.js
@@ -63,6 +63,7 @@ class DependencyGraph {
     useWatchman,
     maxWorkers,
     resetCache,
+    customExtensions,
   }) {
     this._opts = {
       activity: activity || defaultActivity,
@@ -88,6 +89,7 @@ class DependencyGraph {
       useWatchman: useWatchman !== false,
       maxWorkers,
       resetCache,
+      customExtensions,
     };
     this._cache = cache;
     this._assetDependencies = assetDependencies;
@@ -157,7 +159,8 @@ class DependencyGraph {
         preferNativePlatform: this._opts.preferNativePlatform,
         helpers: this._helpers,
         platforms: this._opts.platforms,
-      });
+        customExtensions: this._opts.customExtensions,
+    });
 
       const escapePath = (p: string) => {
         return (path.sep === '\\')  ? p.replace(/(\/|\\(?!\.))/g, '\\\\') : p;
@@ -255,6 +258,7 @@ class DependencyGraph {
         fastfs: this._fastfs,
         shouldThrowOnUnresolvedErrors: this._opts.shouldThrowOnUnresolvedErrors,
         extraNodeModules: this._opts.extraNodeModules,
+        customExtensions: this._opts.customExtensions
       });
 
       const response = new ResolutionResponse({transformOptions});
diff --git a/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js b/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js
index 6f50583..3f9c870 100644
--- a/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js
+++ b/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js
@@ -15,14 +15,28 @@ const SUPPORTED_PLATFORM_EXTS = new Set([
 ]);
 
 // Extract platform extension: index.ios.js -> ios
-function getPlatformExtension(file, platforms = SUPPORTED_PLATFORM_EXTS) {
+function getPlatformExtension(file, platforms = SUPPORTED_PLATFORM_EXTS, customExtensions = []) {
+  const extensionSet = new Set(customExtensions);
   const last = file.lastIndexOf('.');
   const secondToLast = file.lastIndexOf('.', last - 1);
   if (secondToLast === -1) {
     return null;
   }
-  const platform = file.substring(secondToLast + 1, last);
-  return platforms.has(platform) ? platform : null;
+
+  // for extensions like .detox.ios
+  const thirdToSecond = file.lastIndexOf('.', secondToLast - 1);
+  if (thirdToSecond  !== -1) {
+    const platform = file.substring(thirdToSecond + 1, secondToLast);
+    const custom = file.substring(secondToLast + 1, last);
+    if (extensionSet.has(custom)) {
+      const fullCustomExtension = file.substring(thirdToSecond + 1, last);
+      return fullCustomExtension;
+    }
+  }
+
+  const extension = file.substring(secondToLast + 1, last);
+
+  return extensionSet.has(extension)|| platforms.has(extension) ? extension : null;
 }
 
 module.exports = getPlatformExtension;
-- 
2.11.1

