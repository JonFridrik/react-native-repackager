From 5d397a0f0ac490ed59e770c261f94155ad56f1bf Mon Sep 17 00:00:00 2001
From: Omri Bruchim <omrib@wix.com>
Date: Tue, 14 Mar 2017 13:52:18 +0200
Subject: [PATCH 1/2] Add customExtensions parameter

---
 .../react-native/local-cli/server/runServer.js     |  1 +
 .../react-native/local-cli/server/server.js        | 15 +++++++
 .../packager/react-packager/src/Bundler/index.js   |  5 +++
 .../packager/react-packager/src/Resolver/index.js  |  5 +++
 .../packager/react-packager/src/Server/index.js    |  5 +++
 .../src/node-haste/DependencyGraph/HasteMap.js     | 15 +++++--
 .../DependencyGraph/ResolutionRequest.js           | 49 ++++++++++++++--------
 .../react-packager/src/node-haste/index.js         |  5 +++
 .../src/node-haste/lib/getPlatformExtension.js     | 14 ++++++-
 9 files changed, 92 insertions(+), 22 deletions(-)

diff --git a/node_modules/react-native/local-cli/server/runServer.js b/node_modules/react-native/local-cli/server/runServer.js
index 2490aec..5236cf1 100644
--- a/node_modules/react-native/local-cli/server/runServer.js
+++ b/node_modules/react-native/local-cli/server/runServer.js
@@ -92,6 +92,7 @@ function getPackagerServer(args, config) {
     assetExts: defaultAssetExts.concat(args.assetExts),
     resetCache: args.resetCache,
     verbose: args.verbose,
+    customExtensions: args.customExtensions
   });
 }
 
diff --git a/node_modules/react-native/local-cli/server/server.js b/node_modules/react-native/local-cli/server/server.js
index fe0ee73..dba700f 100644
--- a/node_modules/react-native/local-cli/server/server.js
+++ b/node_modules/react-native/local-cli/server/server.js
@@ -36,6 +36,16 @@ function server(argv, config, args) {
     })
   );
 
+  if (args.customExtensions && args.customExtensions.length){
+    console.log('\x1b[41m', formatBanner(
+      'Running with CustomExtensionMode' +'\n' +
+      'All files with: ' + args.customExtensions + 'extensions will be prefered.', {
+        marginLeft: 1,
+        marginRight: 1,
+        paddingBottom: 1,
+      })
+    , '\x1b[0m');
+  }
   console.log(
     'Looking for JS files in\n  ',
     chalk.dim(args.projectRoots.join('\n   ')),
@@ -116,5 +126,10 @@ module.exports = {
   }, {
     command: '--verbose',
     description: 'Enables logging',
+  }, {
+    command: '--customExtensions [list]',
+    description: 'Specify a custom file extension to be used instead of default platform extension',
+    parse: (val) => val.split(','),
+    default: [],
   }],
 };
diff --git a/node_modules/react-native/packager/react-packager/src/Bundler/index.js b/node_modules/react-native/packager/react-packager/src/Bundler/index.js
index 26cdbe6..9332346 100644
--- a/node_modules/react-native/packager/react-packager/src/Bundler/index.js
+++ b/node_modules/react-native/packager/react-packager/src/Bundler/index.js
@@ -94,6 +94,10 @@ const validateOpts = declareOpts({
     type: 'boolean',
     default: false,
   },
+  customExtensions: {
+    type: 'array',
+    required: false,
+  }
 });
 
 const assetPropertyBlacklist = new Set([
@@ -155,6 +159,7 @@ class Bundler {
       polyfillModuleNames: opts.polyfillModuleNames,
       projectRoots: opts.projectRoots,
       resetCache: opts.resetCache,
+      customExtensions: opts.customExtensions,
       transformCode:
         (module, code, options) =>
           this._transformer.transformFile(module.path, code, options),
diff --git a/node_modules/react-native/packager/react-packager/src/Resolver/index.js b/node_modules/react-native/packager/react-packager/src/Resolver/index.js
index 1e8f4f4..b8958c7 100644
--- a/node_modules/react-native/packager/react-packager/src/Resolver/index.js
+++ b/node_modules/react-native/packager/react-packager/src/Resolver/index.js
@@ -61,6 +61,10 @@ const validateOpts = declareOpts({
     type: 'boolean',
     default: false,
   },
+  customExtensions: {
+    type: 'array',
+    required: false,
+  }
 });
 
 const getDependenciesValidateOpts = declareOpts({
@@ -106,6 +110,7 @@ class Resolver {
       assetDependencies: ['react-native/Libraries/Image/AssetRegistry'],
       // for jest-haste-map
       resetCache: options.resetCache,
+      customExtensions: opts.customExtensions,
     });
 
     this._minifyCode = opts.minifyCode;
diff --git a/node_modules/react-native/packager/react-packager/src/Server/index.js b/node_modules/react-native/packager/react-packager/src/Server/index.js
index 178f7ea..79ced59 100644
--- a/node_modules/react-native/packager/react-packager/src/Server/index.js
+++ b/node_modules/react-native/packager/react-packager/src/Server/index.js
@@ -101,6 +101,10 @@ const validateOpts = declareOpts({
     type: 'boolean',
     default: false,
   },
+  customExtensions: {
+    type: 'array',
+    required: false,
+  }
 });
 
 const bundleOpts = declareOpts({
@@ -202,6 +206,7 @@ class Server {
   constructor(options) {
     const opts = this._opts = validateOpts(options);
 
+    
     this._projectRoots = opts.projectRoots;
     this._bundles = Object.create(null);
     this._changeWatchers = [];
diff --git a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js
index a5d6a07..9eb4ad8 100644
--- a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js
+++ b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js
@@ -26,6 +26,7 @@ class HasteMap extends EventEmitter {
     preferNativePlatform,
     helpers,
     platforms,
+    customExtensions,
   }) {
     super();
     this._extensions = extensions;
@@ -34,6 +35,7 @@ class HasteMap extends EventEmitter {
     this._preferNativePlatform = preferNativePlatform;
     this._helpers = helpers;
     this._platforms = platforms;
+    this._customExtensions = customExtensions;
 
     this._processHastePackage = throat(1, this._processHastePackage.bind(this));
     this._processHasteModule = throat(1, this._processHasteModule.bind(this));
@@ -96,9 +98,17 @@ class HasteMap extends EventEmitter {
       return null;
     }
 
+    let module;
+    for (const custom in this._customExtensions){
+      let extension = platform + '.' + this._customExtensions[custom];
+      module = modulesMap[extension]
+      if (module){
+        return module;
+      }
+    }
+
     // If platform is 'ios', we prefer .ios.js to .native.js which we prefer to
     // a plain .js file.
-    let module;
     if (module == null && platform != null) {
       module = modulesMap[platform];
     }
@@ -150,9 +160,8 @@ class HasteMap extends EventEmitter {
     if (this._map[name] == null) {
       this._map[name] = Object.create(null);
     }
-
     const moduleMap = this._map[name];
-    const modulePlatform = getPlatformExtension(mod.path, this._platforms) || GENERIC_PLATFORM;
+    const modulePlatform = getPlatformExtension(mod.path, this._platforms, this._customExtensions) || GENERIC_PLATFORM;
     const existingModule = moduleMap[modulePlatform];
 
     if (existingModule && existingModule.path !== mod.path) {
diff --git a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js
index dff5b74..e7ccbb0 100644
--- a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js
+++ b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js
@@ -32,6 +32,7 @@ class ResolutionRequest {
     fastfs,
     shouldThrowOnUnresolvedErrors,
     extraNodeModules,
+    customExtensions
   }) {
     this._platform = platform;
     this._platforms = platforms;
@@ -45,6 +46,7 @@ class ResolutionRequest {
     this._shouldThrowOnUnresolvedErrors = shouldThrowOnUnresolvedErrors;
     this._extraNodeModules = extraNodeModules;
     this._resetResolutionCache();
+    this._customExtensions = customExtensions;
   }
 
   _tryResolve(action, secondaryAction) {
@@ -439,24 +441,35 @@ class ResolutionRequest {
       }
 
       let file;
-      if (this._fastfs.fileExists(potentialModulePath)) {
-        file = potentialModulePath;
-      } else if (this._platform != null &&
-                 this._fastfs.fileExists(potentialModulePath + '.' + this._platform + '.js')) {
-        file = potentialModulePath + '.' + this._platform + '.js';
-      } else if (this._preferNativePlatform &&
-                 this._fastfs.fileExists(potentialModulePath + '.native.js')) {
-        file = potentialModulePath + '.native.js';
-      } else if (this._fastfs.fileExists(potentialModulePath + '.js')) {
-        file = potentialModulePath + '.js';
-      } else if (this._fastfs.fileExists(potentialModulePath + '.json')) {
-        file = potentialModulePath + '.json';
-      } else {
-        throw new UnableToResolveError(
-          fromModule,
-          toModule,
-          `File ${potentialModulePath} doesnt exist`,
-        );
+
+      if (this._customExtensions && this._customExtensions.length){
+        for (let extension in this._customExtensions){
+          let potentialCustom = potentialModulePath + '.'  + this._platform + '.' + this._customExtensions[extension] + '.js';
+          if (this._fastfs.fileExists(potentialCustom)) {
+            file = potentialCustom;
+          }
+        }
+      }
+
+      if (!file){
+        if (this._fastfs.fileExists(potentialModulePath)) {
+          file = potentialModulePath;} else if (this._platform != null &&
+                   this._fastfs.fileExists(potentialModulePath + '.' + this._platform + '.js')) {
+          file = potentialModulePath + '.' + this._platform + '.js';
+        } else if (this._preferNativePlatform &&
+                   this._fastfs.fileExists(potentialModulePath + '.native.js')) {
+          file = potentialModulePath + '.native.js';
+        } else if (this._fastfs.fileExists(potentialModulePath + '.js')) {
+          file = potentialModulePath + '.js';
+        } else if (this._fastfs.fileExists(potentialModulePath + '.json')) {
+          file = potentialModulePath + '.json';
+        } else {
+          throw new UnableToResolveError(
+            fromModule,
+            toModule,
+            `File ${potentialModulePath} doesnt exist`,
+          );
+        }
       }
 
       return this._moduleCache.getModule(file);
diff --git a/node_modules/react-native/packager/react-packager/src/node-haste/index.js b/node_modules/react-native/packager/react-packager/src/node-haste/index.js
index 1eb5365..280d7ec 100644
--- a/node_modules/react-native/packager/react-packager/src/node-haste/index.js
+++ b/node_modules/react-native/packager/react-packager/src/node-haste/index.js
@@ -106,6 +106,7 @@ class DependencyGraph {
     useWatchman,
     maxWorkers,
     resetCache,
+    customExtensions,
   }: {
     roots: Array<string>,
     ignoreFilePath: (filePath: string) => boolean,
@@ -128,6 +129,7 @@ class DependencyGraph {
     useWatchman: boolean,
     maxWorkers: number,
     resetCache: boolean,
+    customExtensions: Array<string>
   }) {
     this._opts = {
       roots,
@@ -152,6 +154,7 @@ class DependencyGraph {
       useWatchman: useWatchman !== false,
       maxWorkers,
       resetCache,
+      customExtensions,
     };
     this._cache = cache;
     this._assetDependencies = assetDependencies;
@@ -214,6 +217,7 @@ class DependencyGraph {
         preferNativePlatform: this._opts.preferNativePlatform,
         helpers: this._helpers,
         platforms: this._opts.platforms,
+        customExtensions: this._opts.customExtensions,
       });
 
       const escapePath = (p: string) => {
@@ -315,6 +319,7 @@ class DependencyGraph {
         fastfs: this._fastfs,
         shouldThrowOnUnresolvedErrors: this._opts.shouldThrowOnUnresolvedErrors,
         extraNodeModules: this._opts.extraNodeModules,
+        customExtensions: this._opts.customExtensions
       });
 
       const response = new ResolutionResponse({transformOptions});
diff --git a/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js b/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js
index 6f50583..8a7dff0 100644
--- a/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js
+++ b/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js
@@ -15,12 +15,24 @@ const SUPPORTED_PLATFORM_EXTS = new Set([
 ]);
 
 // Extract platform extension: index.ios.js -> ios
-function getPlatformExtension(file, platforms = SUPPORTED_PLATFORM_EXTS) {
+function getPlatformExtension(file, platforms = SUPPORTED_PLATFORM_EXTS, customExtensions = []) {
+  const extensionSet = new Set(customExtensions);
   const last = file.lastIndexOf('.');
   const secondToLast = file.lastIndexOf('.', last - 1);
   if (secondToLast === -1) {
     return null;
   }
+
+  const thirdToSecond = file.lastIndexOf('.', secondToLast - 1);
+  if (thirdToSecond  !== -1) {
+    const platform = file.substring(thirdToSecond + 1, secondToLast);
+    const custom = file.substring(secondToLast + 1, last);
+    if (extensionSet.has(custom)) {
+      const fullCustomExtension = file.substring(thirdToSecond + 1, last);
+      return fullCustomExtension;
+    }
+  }
+
   const platform = file.substring(secondToLast + 1, last);
   return platforms.has(platform) ? platform : null;
 }
-- 
2.10.1 (Apple Git-78)


From d55503251e7b7a915465d81647d6761961373816 Mon Sep 17 00:00:00 2001
From: Omri Bruchim <omrib@wix.com>
Date: Tue, 14 Mar 2017 17:00:42 +0200
Subject: [PATCH 2/2] Add support for custom extension as platform

---
 node_modules/react-native/local-cli/server/server.js     | 10 +++++-----
 .../src/node-haste/DependencyGraph/HasteMap.js           | 16 ++++++++++++----
 .../src/node-haste/DependencyGraph/ResolutionRequest.js  |  7 ++++++-
 .../src/node-haste/lib/getPlatformExtension.js           |  6 ++++--
 4 files changed, 27 insertions(+), 12 deletions(-)

diff --git a/node_modules/react-native/local-cli/server/server.js b/node_modules/react-native/local-cli/server/server.js
index dba700f..15d2024 100644
--- a/node_modules/react-native/local-cli/server/server.js
+++ b/node_modules/react-native/local-cli/server/server.js
@@ -37,11 +37,11 @@ function server(argv, config, args) {
   );
 
   if (args.customExtensions && args.customExtensions.length){
-    console.log('\x1b[41m', formatBanner(
-      'Running with CustomExtensionMode' +'\n' +
-      'All files with: ' + args.customExtensions + 'extensions will be prefered.', {
-        marginLeft: 1,
-        marginRight: 1,
+    console.log('\x1b[33m\x1b[1m', formatBanner(
+      'Running in CustomExtension mode' +'\n' +
+      'All files with: ' + args.customExtensions + ' extensions will be prefered.', {
+        marginLeft: 5,
+        marginRight: 5,
         paddingBottom: 1,
       })
     , '\x1b[0m');
diff --git a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js
index 9eb4ad8..913a90a 100644
--- a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js
+++ b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/HasteMap.js
@@ -99,12 +99,20 @@ class HasteMap extends EventEmitter {
     }
 
     let module;
-    for (const custom in this._customExtensions){
-      let extension = platform + '.' + this._customExtensions[custom];
-      module = modulesMap[extension]
-      if (module){
+    for (const custom in this._customExtensions) {
+      const extensionCustom =  this._customExtensions[custom];
+      module = modulesMap[extensionCustom];
+      if (module) {
         return module;
       }
+      else {
+        const extensionCustomWithPlatform = platform + '.' + this._customExtensions[custom];
+        module = modulesMap[extensionCustomWithPlatform];
+
+        if (module) {
+          return module;
+        }
+      }
     }
 
     // If platform is 'ios', we prefer .ios.js to .native.js which we prefer to
diff --git a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js
index e7ccbb0..4c13e87 100644
--- a/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js
+++ b/node_modules/react-native/packager/react-packager/src/node-haste/DependencyGraph/ResolutionRequest.js
@@ -442,11 +442,16 @@ class ResolutionRequest {
 
       let file;
 
+      // example: if customExtension is 'foo, bar' and platform is 'ios' the prefered extension order is:
+      // foo, foo.ios, bar, bar.ios, ios, native
       if (this._customExtensions && this._customExtensions.length){
         for (let extension in this._customExtensions){
-          let potentialCustom = potentialModulePath + '.'  + this._platform + '.' + this._customExtensions[extension] + '.js';
+          let potentialCustom = potentialModulePath + '.' + this._customExtensions[extension] + '.js';
+          let potentialCustomWithPlatform = potentialModulePath + '.'  + this._platform + '.' + this._customExtensions[extension] + '.js';
           if (this._fastfs.fileExists(potentialCustom)) {
             file = potentialCustom;
+          } else if (this._fastfs.fileExists(potentialCustomWithPlatform)) {
+            file = potentialCustomWithPlatform;
           }
         }
       }
diff --git a/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js b/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js
index 8a7dff0..3f9c870 100644
--- a/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js
+++ b/node_modules/react-native/packager/react-packager/src/node-haste/lib/getPlatformExtension.js
@@ -23,6 +23,7 @@ function getPlatformExtension(file, platforms = SUPPORTED_PLATFORM_EXTS, customE
     return null;
   }
 
+  // for extensions like .detox.ios
   const thirdToSecond = file.lastIndexOf('.', secondToLast - 1);
   if (thirdToSecond  !== -1) {
     const platform = file.substring(thirdToSecond + 1, secondToLast);
@@ -33,8 +34,9 @@ function getPlatformExtension(file, platforms = SUPPORTED_PLATFORM_EXTS, customE
     }
   }
 
-  const platform = file.substring(secondToLast + 1, last);
-  return platforms.has(platform) ? platform : null;
+  const extension = file.substring(secondToLast + 1, last);
+
+  return extensionSet.has(extension)|| platforms.has(extension) ? extension : null;
 }
 
 module.exports = getPlatformExtension;
-- 
2.10.1 (Apple Git-78)

